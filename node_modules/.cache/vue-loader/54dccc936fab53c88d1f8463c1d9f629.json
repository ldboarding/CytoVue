{"remainingRequest":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\src\\components\\CytoscapeGraph.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\src\\components\\CytoscapeGraph.vue","mtime":1637166773885},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojY3l0b3NjYXBlLWRpdiB7CiAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7CiAgbWluLWhlaWdodDogdW5zZXQgIWltcG9ydGFudDsKfQoKLmdyYXBoLWNvbnRhaW5lciB7CiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5jeS1ncmFwaCB7CiAgaGVpZ2h0OiA2MDBweDsKICB3aWR0aDogMTAwJTsKICBiYWNrZ3JvdW5kOiBsaWdodGdyZXk7CiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTsKICBkaXNwbGF5OiBibG9jazsKfQo="},{"version":3,"sources":["CytoscapeGraph.vue"],"names":[],"mappingsurBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CytoscapeGraph.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div class=\"graph-container\">\n\n<p v-if=\"elements == null\"> No File Selected. Please Upload JSON File. </p> \n\n      <cytoscape\n      ref=\"cy\"\n      class=\"cy-graph\"\n      :preConfig=\"preConfig\"\n      :config=\"config\"\n      :afterCreated=\"afterCreated\"\n      v-on:cxttapend=\"addNode\"\n      >\n      <cy-element\n        v-for=\"element in elements\"\n        :definition=\"element\"\n        :key=\"`${element.data.id}`\"\n        :sync=\"true\"\n        v-on:mousedown=\"selectNode(element.data)\"\n      > \n      </cy-element>\n    </cytoscape>\n\n<!--\n<div>\n        <b-button block v-b-toggle.collapse-1 variant=\"primary\">Toggle Edit Menu</b-button>\n          <b-collapse id=\"collapse-1\" class=\"mt-2\" visible>\n            <b-form @submit=\"onSubmit\">\n            <label class=\"sr-only\" for=\"inline-form-input-name\">Node Name </label>\n\n    <b-form-input\n      id=\"inline-form-input-name\"\n      v-model=\"data.nodeS[0].name\"\n      class=\"mb-2 mr-sm-2 mb-sm-0\"\n      :placeholder=\"data.nodeS[0].name.toString()\"\n    ></b-form-input>\n\n    <b-form-group label=\"Node Type\" v-slot=\"{ ariaDescribedby }\">\n      <b-form-radio-group\n        id=\"radio-group-2\"\n        v-model=\"data.nodeS[0].type\" \n        :aria-describedby=\"ariaDescribedby\"\n        name=\"radio-sub-component\"\n      >\n        <b-form-radio v-model=\"data.nodeS[0].type\" :aria-describedby=\"ariaDescribedby\" :name=\" data.nodeS[0].type\" value=\"Discrete\"> Discrete</b-form-radio>\n        <b-form-radio v-model=\"data.nodeS[0].type\" :aria-describedby=\"ariaDescribedby\" :name=\" data.nodeS[0].type\" value=\"Continuous\"> Continuous</b-form-radio>\n      </b-form-radio-group>\n    </b-form-group>\n\n    <div v-if=\"data.nodeS[0].type == 'Continuous'\">\n      <label class=\"sr-only\" for=\"inline-form-input-name\">Min</label>\n      <b-form-input\n        id=\"inline-form-input-name\"\n        v-model=\"data.nodeS[0].min\"\n        class=\"mb-2 mr-sm-2 mb-sm-0\"\n        :placeholder=\"data.nodeS[0].min.toString()\"\n      ></b-form-input>\n\n      <label class=\"sr-only\" for=\"inline-form-input-name\">Max</label>\n      <b-form-input\n        id=\"inline-form-input-name\"\n        v-model=\"data.nodeS[0].max\"\n        class=\"mb-2 mr-sm-2 mb-sm-0\"\n        :placeholder=\"data.nodeS[0].max.toString()\"\n      ></b-form-input>\n    </div>\n\n    <div v-else> \n      <label class=\"sr-only\" for=\"inline-form-input-name\">Level</label>\n      <b-form-input\n        id=\"inline-form-input-name\"\n        v-model=\"data.nodeS[0].min\"\n        class=\"mb-2 mr-sm-2 mb-sm-0\"\n        :placeholder=\"data.nodeS[0].min.toString()\"\n      ></b-form-input>\n    </div>\n\n          </b-form>\n\n          <p></p>\n\n          <b-button variant=\"danger\" v-on:click=\"deleteNode(data.nodeS[0])\">Delete Node</b-button>\n          \n        </b-collapse>\n      </div>\n      -->\n<!--\n\n    <label for=\"range-2\">Generate Data From Graph</label>\n    <b-form-input id=\"range-2\" v-model=\"data.value\" v-on:click=\"changeGen(data.value)\" type=\"range\" min=\"50\" max=\"500\" step=\"50\" debounce=\"500\"></b-form-input>\n    <div class=\"mt-2\">Amount: {{ data.value }}</div>\n    \n    <b-button variant=\"success\"  v-on:click=\"generateData(data.value)\">Generate Data</b-button>\n<p></p>\n<b-button  v-on:click=\"test()\" variant=\"primary\"> Change JSON </b-button>\n-->\n\n</div>\n</template>\n\n<script>\nimport dagre from \"cytoscape-dagre\"\nimport cxtmenu from \"cytoscape-cxtmenu\"\nimport edgehandles from \"cytoscape-edgehandles\"\nimport navigator from \"cytoscape-navigator\"\nimport panzoom from \"cytoscape-panzoom\"\nimport MY_JSON from '../test_data/data_lowes.json'\nimport { jsonData } from \"../data/data\"\nimport { selectedNode } from \"../data/selected\"\nimport JSONVUE from './JSON.vue'\nimport undoRedo from \"cytoscape-undo-redo\";\n\nimport dataGen from '../test_data/data_lowes.json'\nconst axios = require('axios').default\n\nexport default {\n  name: \"CytoscapeGraph\",\n  myJson: MY_JSON,\n  jsonVue: JSONVUE,\n  props: {\n    msg: String,\n  },\n  computed: {\n    cyInstance() {\n      return this.$refs.cy.instance;\n    },\n    // data() {\n    //   const nodeS = selectedNode.state.node\n    //   return [nodeS]\n    // },\n    data() {\n      return{\n        nodeS: [\n          selectedNode.state.node,\n        ],\n        gen: {Store: \"1\"},\n        value: selectedNode.state.amount\n      }\n    },\n    elements() {\n      console.log(\"ELES\");\n      console.log(jsonData.state.json.nodes.length);\n      if (jsonData.state.json.nodes.length > 0) {\n      const nodes = jsonData.state.json.nodes;\n      \n      const edges = jsonData.state.json.edges;\n      return [...nodes, ...edges];\n      } else {\n        return null\n      }\n    },\n    config() {\n      return {\n        edit: '',\n        boxSelectionEnabled: false,\n        style: [\n          {\n            selector: \"node[name]\",\n            style: {\n              'content': 'data(name)',\n              'text-valign': 'center',\n              'text-halign': 'center'\n              \n            }\n          },\n          {\n            selector: ':parent',\n            css: {\n              'text-valign': 'center',\n              'text-halign': 'center',\n            }\n          },\n\n          {\n            selector: ':selected',\n            style: {\n              'background-color': 'blue',\n            }\n          },\n\n          {\n            selector: 'edge',\n            css: {\n              'curve-style': 'bezier',\n              'target-arrow-shape': 'triangle-tee'\n            }\n          },\n          {\n            selector: '.eh-handle',\n            style: {\n              'background-color': 'red',\n              'width': 12,\n              'height': 12,\n              'shape': 'ellipse',\n              'overlay-opacity': 0,\n              'border-width': 12, // makes handle easier to hit\n              'border-opacity': 0\n            }\n          },\n          {\n            selector: '.eh-hover',\n            style: {\n              'background-color': 'blue'\n            }\n          },\n          {\n            selector: '.eh-source',\n            style: {\n              'border-width': 2,\n              'border-color': 'blue'\n            }\n          },\n          {\n            selector: '.eh-target',\n            style: {\n              'border-width': 2,\n              'border-color': 'blue'\n            }\n          },\n          {\n            selector: '.eh-preview, .eh-ghost-edge',\n            style: {\n              'line-color': 'blue',\n              'target-arrow-color': 'blue',\n              'source-arrow-color': 'blue'\n            }\n          },\n          {\n            selector: '.eh-ghost-edge.eh-preview-active',\n            style: {\n              'opacity': 0\n          }\n        }\n        ],\n        layout: {\n          name: \"dagre\",\n        },\n      };\n    },\n  },\n  methods: {\n    preConfig(cytoscape) {\n      cytoscape.use(dagre);\n      cytoscape.use(cxtmenu);\n      cytoscape.use(edgehandles);\n      cytoscape.use(navigator);\n      cytoscape.use(panzoom);\n      cytoscape.use(undoRedo);\n    },\n    onSubmit(event) {\n        event.preventDefault()\n        console.log(this.data)\n        alert(JSON.stringify(this.form))\n    },\n    editBox(element) {\n      const h = this.$createElement\n      const messageNode = h('div', { class: ['foobar'] }, [\n        h('b-form', 'Hello')\n      ])\n      console.log(element)\n      this.edit = ''\n      this.$bvModal.msgBoxConfirm([messageNode])\n        .then(value => {\n          this.edit = value\n        })\n        .catch(err => {\n          console.log(err)\n        })\n    },\n    selectNode(node) {\n      //console.log(node);\n      selectedNode.commit('changeNode', node );\n    },\n    changeGen(val) {\n      //console.log(val);\n      selectedNode.commit('changeGen', val );\n    },\n    test() {\n      getTheFile()\n    },\n    redraw(cy) {\n      var my_layout = cy.makeLayout({name: 'dagre'})\n      my_layout.run()\n    },\n    generateData(value){\n      console.log(value)\n      console.log(\"-------------------------------------\")\n      console.log(dataGen)\n      console.log(\"-------------------------------------\")\n      console.log(jsonData.getters.getNode)\n      //jsonData.commit('saveData')\n      \n      \n      axios\n      .post('http://127.0.0.1:8000/getData?no_samples=' + value, jsonData.getters.getNode)\n      .then(response => {\n        console.log(\"-----------------*******--------------------\")\n        console.log(response)\n        //console.log(response.data)\n        saveJSON(response.data, 'genData-' + value + '.json')\n        //jsonData.commit('addData', response)\n        //this.gen = response.data\n        //console.log(this.gen)\n        \n      })\n      .catch(error => {\n        console.log(error)\n      })\n      \n    },\n    deleteNode(node) {\n      //selectedNode.commit('changeNode', node );\n      console.log(\"DELETE\")\n      console.log(node.id)\n      //this.nodeS = null\n      //ur.do(\"remove\", selectedNode.state.node);\n      jsonData.commit('removeNode', node.id)\n    },\n    addNode(event) {\n      console.log(event.target, this.$refs.cy.instance);\n      console.log(event.position);\n    \n      if (event.target === this.$refs.cy.instance) {\n        console.log(\"adding node\", event.target);\n      }\n\n      var nodeid = 0\n      nodeid = makeid(5);\n\n      var obj = {\n        data: {\"id\": \"x_\" + nodeid, \"name\": \"New Node\", \"type\": \"nodeType\", \"min\": 0, \"max\": 0},\n        position: event.position\n      }\n\n      jsonData.commit('addNode', obj );\n      selectedNode.commit('changeNode', obj.data);\n    },\n    editNode(event, id) {\n      const ele = this.elements.some((ele, index) => {\n        console.log(ele.data.id)\n        console.log(id)\n        const match = ele.data.id == id\n        if (match) {\n          console.log(\"Index\" + index)\n          //jsonData.commit('removeNode', ele.id())\n        }\n        return match\n      })\n      console.log(event)\n    console.log(ele)\n    },\n    updateNode(event) {\n      console.log(event.target.data().label)\n      let label = event.target.data().label\n      label += label[0]\n      event.target.data({ label })\n    },\n    afterCreated(cy) {\n\n      //cy.makeLayout({name: 'dagre'}).run()\n\n      console.log(\"selectedNode\")\n      //var sel = selectedNode.getters.getNode \n      cy.pan({x: 300, y: 160})\n      cy.zoom(2)\n\n      var ur = cy.undoRedo({\n                    isDebug: true\n                });\n\n      //console.log(\"NEW JSON: \" + jsonData.state.json.nodes)\n      //console.log(\"NEW VUE: \")\n      //console.log(jsonVue)\n      //console.log(\"VUEX CALL ____ : \" + this.$jsonData)\n      //console.log(\"OLD JSON: \" + MY_JSON)\n\n      //var jsonFile = JSON.stringify(jsonData.state);\n      //var jsonFile = JSON.stringify(jsonData.state.json);\n      //var list = JSON.parse(jsonFile);\n      // cy.json({ elements: list });\n      // var my_layout = cy.makeLayout({name: 'dagre'});\n      // my_layout.run();\n\n      // cy.cxtmenu({\n      //     selector: 'node',\n      //     commands: [\n      //       {\n      //         content: 'Edit [N/A]',\n      //         select: function(ele){\n      //           var num \n      //           var currentName = ele._private.data.name\n      //           var editName = prompt(\"Please enter name\", \"New Name\")\n\n      //           jsonData.state.json.nodes.forEach((element, index) => {\n      //             console.log(\"CHAGE NAME INFO: \" + element.data.name)\n      //             console.log(\"CHAGE NAME INFO: \" + currentName)\n      //             console.log(\"NUM: \" + index)\n      //             if (currentName == element.data.name) {num = index}\n      //           });\n      //           console.log(\"CHAGE NUMBVER INFO: \" + num)\n                \n      //           ele.data('name', editName);\n      //           console.log(ele._private.data);\n      //           var payload = {'key1': editName, \"key2\": num}\n      //           jsonData.commit('changeName', payload );\n                \n      //         }\n      //       },\n      //       {\n      //         content: 'Delete',\n      //         select: function(ele){\n      //           console.log( ele );\n      //           //cy.remove('#' + ele.id());\n      //           jsonData.commit('removeNode', ele.id())\n      //         }\n      //       }, \n      //       {\n      //         content: 'Open',\n      //         select: function(ele){\n      //           console.log( ele.id() );\n      //           console.log( ele.data('name') );\n      //           //this.button()\n      //           this.$popup('append', 'foobar')\n      //           //alert( \"Name: \" + ele.data('name')  +\"\\nType: \" + ele.data('type'));\n      //         }\n      //       }\n      //     ]\n      //   });\n\n        cy.cxtmenu({\n          selector: 'core',\n          commands: [\n            // {\n            //   content: 'Add Node',\n            //   select: function(){\n            //     // TODO need to check whether this is unique\n            //     var nodeid = 0;\n            //     nodeid = makeid(5);\n                \n            //     // get mouse position\n            //     // TODO: make it work on touch screens\n            //     var e = window.event;\n            //     var pos = {x: e.offsetX, y: e.offsetY};\n            //     console.log(pos);\n\n            //     var nodeName = prompt(\"Please enter name\", \"Node\");\n            //     var nodeType = prompt(\"Please enter type\", \"Type\");\n\n            //     // cy.add({\n            //     //   \"group\": \"nodes\",\n            //     //   \"data\": {\"id\": \"x_\" + nodeid, \"name\": nodeName, \"type\": nodeType, \"min\": 0, \"max\": 0},\n            //     //   renderedPosition: pos\n            //     // })\n\n            //     var obj = {\n            //       data: {\"id\": \"x_\" + nodeid, \"name\": nodeName, \"type\": nodeType, \"min\": 0, \"max\": 0},\n            //       position: pos\n            //     }\n\n            //     console.log(obj);\n\n            //     //var payload = {'key1': obj}\n            //     jsonData.commit('addNode', obj );\n            //   }\n            // },\n            {\n              content: 'Redraw',\n              select: function(){\n                var my_layout = cy.makeLayout({name: 'dagre'})\n                my_layout.run()\n              }\n            },\n            {\n              content: 'Undo [N/A]',\n              select: function(){\n                console.log(\"UNDO: \");\n                console.log(ur);\n                \n                ur.undo();\n                //eles.restore();\n              }\n            },\n            {\n              content: 'Save JSON',\n              select: function(){\n                cy.remove('.eh-handle')\n                saveJSON(cy.json()['elements'], 'data_myData.json')\n              }\n            }\n          ]\n        });\n\n      cy.cxtmenu({\n          selector: 'edge',\n          commands: [\n            {\n              content: 'Invert',\n              select: function(ele){\n                console.log( ele.data('source') + '->' + ele.data('target') );\n                var ele_new = ele.clone();\n                ele_new.data().source = ele.data().target;\n                ele_new.data().target = ele.data().source;\n                cy.remove('#' + ele.id());\n                cy.add(ele_new)\n              },\n              //enabled: false\n            },\n            {\n              content: 'Delete',\n              select: function(ele){\n                console.log( ele.id() );\n                cy.remove('#' + ele.id());\n              }\n            }\n          ]\n        });\n\n      let eh = cy.edgehandles({\n          enabled: true\n        }); \n\n      if (this.$toggle) {\n        eh.enableDrawMode();\n      } else {\n        eh.disableDrawMode();\n      }\n      //eh.disableDrawMode();\n      \n      //eh.enable();\n\n      // cy.on('ehstart', (event, sourceNode) => {\n      //     console.log(\"HOVER: \" + event.posistion);\n      //     console.log(\"HOVER: \" + sourceNode);\n      // });\n\n      console.log(eh);\n\n      cy.navigator({\n          container: false, \n          viewLiveFramerate: 0, \n          thumbnailEventFramerate: 30, \n          thumbnailLiveFramerate: false, \n          dblClickDelay: 200, \n          removeCustomContainer: true, \n          rerenderDelay: 100       \n        });\n\n      cy.panzoom({\n        zoomFactor: 0.05, // zoom factor per zoom tick\n        zoomDelay: 45, // how many ms between zoom ticks\n        minZoom: 0.1, // min zoom level\n        maxZoom: 10, // max zoom level\n        fitPadding: 50, // padding when fitting\n        panSpeed: 10, // how many ms in between pan ticks\n        panDistance: 10, // max pan distance per tick\n        panDragAreaSize: 75, // the length of the pan drag box in which the vector for panning is calculated (bigger = finer control of pan speed and direction)\n        panMinPercentSpeed: 0.25, // the slowest speed we can pan by (as a percent of panSpeed)\n        panInactiveArea: 8, // radius of inactive area in pan drag box\n        panIndicatorMinOpacity: 0.5, // min opacity of pan indicator (the draggable nib); scales from this to 1.0\n        zoomOnly: false, // a minimal version of the ui only with zooming (useful on systems with bad mousewheel resolution)\n        fitSelector: undefined, // selector of elements to fit\n        animateOnFit: function(){ // whether to animate on fit\n          return false;\n        },\n        fitAnimationDuration: 1000, // duration of animation on fit\n\n        // icon class names\n        sliderHandleIcon: 'fa fa-minus',\n        zoomInIcon: 'fa fa-plus',\n        zoomOutIcon: 'fa fa-minus',\n        resetIcon: 'fa fa-expand'\n        }); \n\n      imposeConstraints(cy);\n\n      //this.cyInstance.makeLayout({ name: \"dagre\" }).run();\n    },\n  },\n};\n\nconst pickerOpts = {\n  types: [\n    {\n      description: 'JSON',\n      accept: {\n        'JSON/*': ['.json']\n      }\n    },\n  ],\n  excludeAcceptAllOption: true,\n  multiple: false\n};\n\nasync function getTheFile() {\n  // open file picker\n  var fileHandle = null;\n  [fileHandle] = await window.showOpenFilePicker(pickerOpts);\n  console.log(fileHandle);\n\n  // get file contents\n  const fileData = await fileHandle.getFile();\n  console.log(\"FILE DATA: \" + fileData.name);\n\n  jsonData.commit('changeJSON', fileData)\n  //loadFile(\"test_data/\" + fileData.name);\n}\n\n\n//jsonData.commit('addNode', obj );\n\n//src\\test_data\\data_test.json\n//C:\\Users\\Lucas Dickson\\Downloads\\data-tools-vue\\src\\test_data\\data_test.json\n\n\n// function loadFile(filename, cy) {\n//   // using Promise\n//   fetch(filename, {\n//       headers : { \n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//        }\n//     })\n//     .then(response => {\n//       console.log(\"HELP\" + response);\n//       return response.json();\n//     })\n//     .then(parsed => {\n//       console.log(\"DATA\" + parsed);\n//       cy.json({ elements: parsed });\n//       var my_layout = cy.makeLayout({name: 'dagre'});\n//       my_layout.run();\n//     })\n//     .catch(err => {\n//       console.log(\"ERROR\" + err);\n//     })\n// }\n\n// function getURLParameter(name) {\n//   return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\\+/g, '%20')) || null;\n// }\n\nfunction imposeConstraints(cy) {\n  cy.on('add', 'edge', function(evt){\n    var edge = evt.target;\n    var all_edges = cy.edges(\"[source = '\" + edge.source().id()+\"'][target = '\" + edge.target().id() + \"']\");\n\n    if (all_edges.length >= 2) {\n      cy.remove('#' + edge.id());\n    }\n\n    // if want to allow bi-directionality comment these lines\n    var all_edges_invert = cy.edges(\"[target = '\" + edge.source().id()+\"'][source = '\" + edge.target().id() + \"']\");\n\n    if (all_edges_invert.length >= 1) {\n      cy.remove('#' + edge.id());\n    }\n  });\n}\n\nfunction saveJSON(data, filename){\n    if(!data) {\n        console.error('No data')\n        return;\n    }\n    if(!filename) filename = 'console.json'\n\n    if(typeof data === \"object\"){\n        data = JSON.stringify(data, undefined, 4)\n    }\n    var blob = new Blob([data], {type: 'text/json'}),\n        e    = document.createEvent('MouseEvents'),\n        a    = document.createElement('a')\n\n    a.download = filename\n    a.href = window.URL.createObjectURL(blob)\n    a.dataset.downloadurl =  ['text/json', a.download, a.href].join(':')\n    e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null)\n    a.dispatchEvent(e)\n}\n\nfunction makeid(length) {\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * \n    charactersLength));\n  }\n  return result;\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<!-- use ::v-deep and scoped css in real projects -->\n<style lang=\"scss\" >\n#cytoscape-div {\n  height: 100% !important;\n  min-height: unset !important;\n}\n\n.graph-container {\n  font-family: sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.cy-graph {\n  height: 600px;\n  width: 100%;\n  background: lightgrey;\n  border: 1px solid blue;\n  display: block;\n}\n</style>\n"]}]}