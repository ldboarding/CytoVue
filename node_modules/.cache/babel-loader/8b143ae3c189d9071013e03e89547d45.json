{"remainingRequest":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\src\\components\\CytoscapeGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\src\\components\\CytoscapeGraph.vue","mtime":1634084525422},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas Dickson\\Downloads\\CytoVue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGRhZ3JlIGZyb20gImN5dG9zY2FwZS1kYWdyZSI7CmltcG9ydCBDYXJkIGZyb20gIi4vQ2FyZCI7Cgpjb25zdCBnZW5lcmF0ZU5vZGVzID0gKHsKICBhbW91bnQKfSkgPT4gQXJyYXkuZnJvbSh7CiAgbGVuZ3RoOiBhbW91bnQKfSkubWFwKChfLCBpbmRleCkgPT4gKHsKICBncm91cDogIm5vZGVzIiwKICBkYXRhOiB7CiAgICBpZDogYG5vZGUtJHtpbmRleH1gCiAgfQp9KSk7Cgpjb25zdCBnZW5lcmF0ZUVkZ2VzRnJvbU5vZGVzID0gbm9kZXMgPT4gbm9kZXMuc2xpY2UoMSwgbm9kZXMubGVuZ3RoKS5tYXAoKG5vZGUsIGluZGV4KSA9PiAoewogIGdyb3VwOiAiZWRnZXMiLAogIGRhdGE6IHsKICAgIGlkOiBgJHtub2RlLmRhdGEuaWR9LSR7aW5kZXggKyAxfWAsCiAgICBzb3VyY2U6IG5vZGUuZGF0YS5pZCwKICAgIHRhcmdldDogYG5vZGUtMGAKICB9Cn0pKTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQ3l0b3NjYXBlR3JhcGgiLAogIHByb3BzOiB7CiAgICBtc2c6IFN0cmluZwogIH0sCiAgY29tcG9uZW50czogewogICAgQ2FyZAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGN5SW5zdGFuY2UoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyZWZzLmN5Lmluc3RhbmNlOwogICAgfSwKCiAgICBlbGVtZW50cygpIHsKICAgICAgY29uc3Qgbm9kZXMgPSBnZW5lcmF0ZU5vZGVzKHsKICAgICAgICBhbW91bnQ6IDEwCiAgICAgIH0pOwogICAgICBjb25zdCBlZGdlcyA9IGdlbmVyYXRlRWRnZXNGcm9tTm9kZXMobm9kZXMpOwogICAgICByZXR1cm4gWy4uLm5vZGVzLCAuLi5lZGdlc107CiAgICB9LAoKICAgIGNvbmZpZygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdHlsZTogW3sKICAgICAgICAgIHNlbGVjdG9yOiAibm9kZSIsCiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBzaGFwZTogImhleGFnb24iLAogICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICJyZWQiLAogICAgICAgICAgICBsYWJlbDogImRhdGEoaWQpIgogICAgICAgICAgfQogICAgICAgIH1dLAogICAgICAgIGxheW91dDogewogICAgICAgICAgbmFtZTogImRhZ3JlIgogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgfSwKICBtZXRob2RzOiB7CiAgICBwcmVDb25maWcoY3l0b3NjYXBlKSB7CiAgICAgIGN5dG9zY2FwZS51c2UoZGFncmUpOwogICAgfSwKCiAgICBhc3luYyBhZnRlckNyZWF0ZWQoY3kpIHsKICAgICAgYXdhaXQgdGhpcy4kbmV4dFRpY2soKTsKICAgICAgY29uc29sZS5sb2coY3kpOwogICAgICB0aGlzLmN5SW5zdGFuY2UubWFrZUxheW91dCh7CiAgICAgICAgbmFtZTogImRhZ3JlIgogICAgICB9KS5ydW4oKTsKICAgIH0KCiAgfQp9Ow=="},{"version":3,"sources":["CytoscapeGraph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAqBA,OAAA,KAAA,MAAA,iBAAA;AACA,OAAA,IAAA,MAAA,QAAA;;AAEA,MAAA,aAAA,GAAA,CAAA;AAAA,EAAA;AAAA,CAAA,KACA,KAAA,CAAA,IAAA,CAAA;AAAA,EAAA,MAAA,EAAA;AAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,EAAA,KAAA,MAAA;AACA,EAAA,KAAA,EAAA,OADA;AAEA,EAAA,IAAA,EAAA;AACA,IAAA,EAAA,EAAA,QAAA,KAAA;AADA;AAFA,CAAA,CAAA,CADA;;AAQA,MAAA,sBAAA,GAAA,KAAA,IACA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA,IAAA,EAAA,KAAA,MAAA;AACA,EAAA,KAAA,EAAA,OADA;AAEA,EAAA,IAAA,EAAA;AACA,IAAA,EAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA,IAAA,KAAA,GAAA,CAAA,EADA;AAEA,IAAA,MAAA,EAAA,IAAA,CAAA,IAAA,CAAA,EAFA;AAGA,IAAA,MAAA,EAAA;AAHA;AAFA,CAAA,CAAA,CADA;;AAUA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GAFA;AAKA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GALA;AAQA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,EAAA,CAAA,QAAA;AACA,KAHA;;AAIA,IAAA,QAAA,GAAA;AACA,YAAA,KAAA,GAAA,aAAA,CAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA;AACA,YAAA,KAAA,GAAA,sBAAA,CAAA,KAAA,CAAA;AACA,aAAA,CAAA,GAAA,KAAA,EAAA,GAAA,KAAA,CAAA;AACA,KARA;;AASA,IAAA,MAAA,GAAA;AACA,aAAA;AACA,QAAA,KAAA,EAAA,CACA;AACA,UAAA,QAAA,EAAA,MADA;AAEA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA,SADA;AAEA,gCAAA,KAFA;AAGA,YAAA,KAAA,EAAA;AAHA;AAFA,SADA,CADA;AAWA,QAAA,MAAA,EAAA;AACA,UAAA,IAAA,EAAA;AADA;AAXA,OAAA;AAeA;;AAzBA,GARA;AAmCA,EAAA,OAAA,EAAA;AACA,IAAA,SAAA,CAAA,SAAA,EAAA;AACA,MAAA,SAAA,CAAA,GAAA,CAAA,KAAA;AACA,KAHA;;AAKA,UAAA,YAAA,CAAA,EAAA,EAAA;AACA,YAAA,KAAA,SAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,EAAA;AAEA,WAAA,UAAA,CAAA,UAAA,CAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,EAAA,GAAA;AACA;;AAVA;AAnCA,CAAA","sourcesContent":["<template>\n  <div class=\"graph-container\">\n    <cytoscape\n      ref=\"cy\"\n      class=\"cy-graph\"\n      :preConfig=\"preConfig\"\n      :config=\"config\"\n      :afterCreated=\"afterCreated\"\n    >\n      <cy-element\n        v-for=\"element in elements\"\n        :definition=\"element\"\n        :key=\"`${element.data.id}`\"\n      />\n    </cytoscape>\n    <v-btn block> Block Button </v-btn>\n    <Card />\n  </div>\n</template>\n\n<script>\nimport dagre from \"cytoscape-dagre\";\nimport Card from \"./Card\";\n\nconst generateNodes = ({ amount }) =>\n  Array.from({ length: amount }).map((_, index) => ({\n    group: \"nodes\",\n    data: {\n      id: `node-${index}`,\n    },\n  }));\n\nconst generateEdgesFromNodes = (nodes) =>\n  nodes.slice(1, nodes.length).map((node, index) => ({\n    group: \"edges\",\n    data: {\n      id: `${node.data.id}-${index + 1}`,\n      source: node.data.id,\n      target: `node-0`,\n    },\n  }));\n\nexport default {\n  name: \"CytoscapeGraph\",\n  props: {\n    msg: String,\n  },\n  components: {\n    Card,\n  },\n  computed: {\n    cyInstance() {\n      return this.$refs.cy.instance;\n    },\n    elements() {\n      const nodes = generateNodes({ amount: 10 });\n      const edges = generateEdgesFromNodes(nodes);\n      return [...nodes, ...edges];\n    },\n    config() {\n      return {\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              shape: \"hexagon\",\n              \"background-color\": \"red\",\n              label: \"data(id)\",\n            },\n          },\n        ],\n        layout: {\n          name: \"dagre\",\n        },\n      };\n    },\n  },\n  methods: {\n    preConfig(cytoscape) {\n      cytoscape.use(dagre);\n    },\n\n    async afterCreated(cy) {\n      await this.$nextTick();\n      console.log(cy)\n\n      this.cyInstance.makeLayout({ name: \"dagre\" }).run();\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<!-- use ::v-deep and scoped css in real projects -->\n<style lang=\"scss\" >\n#cytoscape-div {\n  height: 100% !important;\n  min-height: unset !important;\n}\n\n.graph-container {\n  font-family: sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.cy-graph {\n  height: 400px;\n  width: 100%;\n  background: lightblue;\n  border: 1px solid red;\n  display: block;\n}\n</style>\n"],"sourceRoot":"src/components"}]}